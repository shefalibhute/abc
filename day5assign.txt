que1]
•Create a package named MANAGE_EMP_PACK that has two public procedures, two package level variables(private vars) and a private function. The public procedure HIRE_EMP adds an employee record in EMPLOYEES table and the public procedure FIRE_EMP deletes an employee record from the EMPLOYEES table. The two variables v_insert_cnt and v_delete_cnt are used in the package, for keeping record of the numbers of times insert / delete has been executed. 
Create a private function VALIDATE_EMP in the package to validate employee number. This function can be called from HIRE_EMP and FIRE_EMP.
•The function VALIDATE_EMP accepts an employee number in a parameter p_eno and returns TRUE if the value of employee number exists in the EMPLOYEES table else it returns FALSE.
•The procedure HIRE_EMP takes all the column values of the EMPLOYEES table as parameters. It gives a call to VALIDATE_EMP by passing on the value of employee number and if the function returns TRUE then it displays message ‘Employee number already in use’. If the function returns FALSE then it inserts a new record in the EMPLOYEES table and displays a message ‘One employee added’. It also increments the value of v_insert_cnt by 1.
•The procedure FIRE_EMP accepts an employee number as a parameter and gives a call to VALIDATE_EMP by passing on the value of employee number. If the function returns TRUE then it deletes the corresponding record from the EMPLOYEES table, displays message ‘One employee deleted’ and increments the value of v_delete_cnt by 1. If the function returns FALSE then it displays message ‘Wrong employee number’.
•Check working of the methods in MANAGE_EMP_PACK by giving calls to the public procedures and by displaying value of the appropriate package variable, through an anonymous block. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

create or replace package manage_emp_pack as
v_insert_cnt number;
v_delete_cnt number;
function validate_emp (p_eno emp.empno%type) return boolean;
procedure hire_emp(p_empno emp.empno%type, p_ename emp.ename%type, p_job emp.job%type,p_mgr emp.mgr%type,p_hiredate emp.hiredate%type,
p_sal emp.sal%type,p_comm emp.comm%type,p_deptno emp.deptno%type) ;
procedure fire_emp(p_empno emp.empno%type);
end;
/

create or replace package body manage_emp_pack as


	function validate_emp (p_eno emp.empno%type) return boolean as
	ct number:=0;
begin
	select count(*)  into ct from emp where empno=p_eno;
	if (ct=1) then
	dbms_output.put_line(f_empno ||'employee exists');
	return true;
	else
	dbms_output.put_line(f_empno ||'employee doesnot exist');
	return false;
	end if;
end;

	procedure hire_emp(p_empno emp.empno%type, p_ename emp.ename%type, p_job emp.job%type,p_mgr emp.mgr%type,p_hiredate emp.hiredate		%type,
	p_sal emp.sal%type,p_comm emp.comm%type,p_deptno emp.deptno%type) as
	cnt number:=0;
	invalid_emp exception;
	invalid_mgr exception;

begin 
	if validate_emp(p_eno) then
	select count(*) into cnt from emp where mgr=p_mgr;
		if cnt!=0 then 
		insert into emp values(p_empno,p_ename,p_job,p_mgr,p_hiredate,p_sal,p_comm,p_deptno);
		v_insert_cnt:=v_insert_cnt+1;
		dbms_output.put_line('one employee added');
	else
		raise invalid_mgr;
	end if;
else
	raise invalid_emp;
end if;

exception 
	when invalid_emp then
	dbms_output.put_line('Invalid employee id');
	when invalid_mgr then
	dbms_output.put_line('Invalid Manager id);
end;

procedure fire_emp(p_eno emp.empno%type) as
	invalid_emp exception;
begin
	if validate_emp(p_eno) then
		raise invalid_emp;
	else	
		delete from emp where empno=p_eno;
		v_delete_cnt:=v_delete_cnt+1;
		dbms_output.put_line('one employee deleted');
		
		
	end if;
exception
	when invalid_emp then
	dbms_output.put_line('Invalid employee id');

end;
begin
v_insert_cnt:=0;
v_delete_cnt:=0;
end;
/



--------------------------------------------------------------------------------------------------------------------------------------
que2]
•Create a package named MY_EMP_PACK having two overloaded functions named GET_AVG_SAL. The first function accepts first name as a parameter while the second function accepts employee_id as a parameter and both return the average salary paid in the department to which the employee belongs.  Both the functions should handle the exception for non-existing employee by displaying an appropriate error message.
•Give a call to GET_AVG_SAL through an anonymous PL/SQL block by passing on employee number 204. Do the same again by passing on employee name ‘Valli’.



create or replace package my_emp_pack as
function GET_AVG_SAL(p_ename emp.ename%type);
function GET_AVG_SAL(p_eno emp.empno%type);
end;
/

create or replace package  MY_EMP_PACK

   











































